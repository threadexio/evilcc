#!/usr/bin/env python3
from typing import *
import subprocess
import tempfile
import sys
import os

###############################################################################

DEFAULT_SYSROOT = os.path.dirname(__file__)

VERBOSE = False
OUTPUT = sys.stderr
OUTPUT_TTY = OUTPUT.isatty()

class styled:
    _x: str
    _modes: List[str]

    def __init__(self, x: str):
        self._x = x
        self._modes = []

    def _with_mode(self, mode: str) -> Self:
        self._modes.append(mode)
        return self

    def __str__(self) -> str:
        global OUTPUT_TTY

        if OUTPUT_TTY:
            return f"\033[{';'.join(self._modes)}m{self._x}\033[0m"
        else:
            return f"{self._x}"

    def __len__(self) -> int:
        return len(self._x)

    def __repr__(self) -> str:
        return repr(self._x)

    def bold(self) -> Self:
        return self._with_mode("1")

    def dim(self) -> Self:
        return self._with_mode("2")

    def italic(self) -> Self:
        return self._with_mode("3")

    def underline(self) -> Self:
        return self._with_mode("4")

    def bright_red(self) -> Self:
        return self._with_mode("91")

    def bright_green(self) -> Self:
        return self._with_mode("92")

    def bright_yellow(self) -> Self:
        return self._with_mode("93")

    def bright_magenta(self) -> Self:
        return self._with_mode("95")

###############################################################################

def _log(prefix, msg: str):
    lines = iter(msg.splitlines())

    print(f"{prefix} {next(lines)}", file=OUTPUT)

    gutter = len(prefix)
    for line in lines:
        print(" " * gutter + f" {line}", file=OUTPUT)

def info(msg: str):
    global VERBOSE
    if VERBOSE:
        _log(styled("[evilcc]").bold().bright_green(), msg)

def warn(msg: str):
    _log(styled("[evilcc]").bold().bright_yellow(), msg)

def error(msg: str):
    _log(styled("[evilcc]").bold().bright_red(), msg)

def fatal(msg: str):
    error(msg)
    exit(1)

def pager(content: str):
    if OUTPUT_TTY:
        try:
            pager = os.environ.get("PAGER") or "less"
            subprocess.run([pager, "-R"], input=content,encoding="utf-8")
            return
        except:
            pass

    print(content, file=OUTPUT)

def run(argv: List[str], **kwargs) -> subprocess.CompletedProcess[str]:
    info("running: " + ' '.join(map(lambda x: f"'{styled(x).bold().bright_magenta()}'", argv)))

    try:
        return subprocess.run(argv, check=True, **kwargs)
    except subprocess.CalledProcessError as e:
        cmd_str = ' '.join(map(lambda x: f"'{styled(x).bold().bright_magenta()}'", argv))
        fatal(f"command: {cmd_str} exited with code: {e.returncode}")

###############################################################################

class Config:
    def __init__(self, argv: List[str] = sys.argv):
        self.setuid: Optional[int] = None
        self.setgid: Optional[int] = None
        self.personality_add: List[str] = []
        self.personality_remove: List[str] = []
        self.drop_sugid: Optional[str] = None
        self.is_setuid: bool = False
        self.is_setgid: bool = False
        self.debug: bool = False
        self.wait_for_debugger: bool = False
        self.entry_symbol: str = "__evilcc_entry"
        self.real_entry_symbol: Optional[str] = None

        self.sysroot: str = DEFAULT_SYSROOT

        self.will_link: bool = True
        self.is_exe: bool = True
        self.out: Optional[str] = None

        self.cc: str = None
        self.flags: List[str] = []
        self.args: List[str] = []

        self.nm: str = None
        self.strip: str = None

        self._parse_args(argv)

        if self.cc is None:
            self.cc = os.environ.get("_CC")
            if self.cc is None:
                warn("_CC is not set. falling back to 'cc'")
                self.cc = "cc"

        if self.nm is None:
            self.nm = os.environ.get("NM") or "nm"

        if self.strip is None:
            self.strip = os.environ.get("STRIP") or "strip"

    def _parse_args(self, argv):
        args = iter(argv[1:])

        while True:
            try:
                arg = next(args)
            except StopIteration:
                break

            if arg.startswith("+"):
                if arg.startswith("-"):
                    self.flags.append(arg[1:])
                else:
                    self.args.append(arg[1:])
                continue

            match arg:
                case "-h" | "--help":
                    self._print_usage(argv)
                    exit(0)

                case "--verbose":
                    global VERBOSE
                    VERBOSE = True

                case "--setuid":
                    try:
                        self.setuid = int(next(args))
                    except StopIteration:
                        fatal("--setuid needs a value")

                case "--setgid":
                    try:
                        self.setgid = int(next(args))
                    except StopIteration:
                        fatal("--setgid needs a value")

                case "--personality-add":
                    try:
                        persona = next(args)
                        self.personality_add.append(persona)
                    except StopIteration:
                        fatal("--personality-add needs a value")

                case "--personaliy-remove":
                    try:
                        persona = next(args)
                        self.personality_remove.append(persona)
                    except StopIteration:
                        fatal("--personality-remove needs a value")

                case "--drop-sugid":
                    try:
                        method = next(args)
                        if method not in ["prctl", "chmod"]:
                            fatal("invalid value for --drop-sugid. see --help")
                        self.drop_sugid = method
                    except StopIteration:
                        fatal("--drop-sugid needs a value")

                case "--is-setuid":
                    self.is_setuid = True

                case "--is-setgid":
                    self.is_setgid = True

                case "--debug":
                    self.debug = True

                case "--wait-for-debugger":
                    self.wait_for_debugger = True

                case "--entry-symbol":
                    try:
                        self.entry_symbol = next(args)
                    except StopIteration:
                        fatal("--entry-symbol needs a value")

                case "--real-entry-symbol":
                    try:
                        self.real_entry_symbol = next(args)
                    except StopIteration:
                        fatal("--real-entry-symbol needs a value")

                case "--sysroot":
                    try:
                        self.sysroot = next(args)
                    except StopIteration:
                        fatal("--sysroot needs a value")

                case "-c":
                    self.will_link = False
                    self.flags.append("-c")

                case "-shared":
                    self.is_exe = False
                    self.flags.append("-shared")

                case "-o":
                    try:
                        self.out = next(args)
                    except ArgValueNotFoundError:
                        fatal("-o needs a value")

                case _:
                    if arg.startswith("-"):
                        self.flags.append(arg)
                    else:
                        self.args.append(arg)

    def _print_usage(self, argv):
        uid = styled('<uid>').dim().italic()
        gid = styled('<gid>').dim().italic()
        persona = styled('<persona>').dim().italic()
        method = styled('<method>').dim().italic()
        symbol = styled('<symbol>').dim().italic()
        path = styled('<path>').dim().italic()

        pager(f"""{styled('Usage:').underline()} {styled(argv[0]).bright_magenta()} [options] file…

{styled('Options:').underline()}
  --verbose                         Be more verbose.

  --setuid {uid}                    Set the real/effective/saved uids to {uid}.
                                     • If {uid} < 0, then the real and saved
                                       uids are set to the effective uid.
  --setgid {gid}                    Set the real/effective/saved gids to {gid}.
                                     • If {gid} < 0, then the real and saved
                                       gids are set to the effective gid.
  --personality-add {persona}       Add these personality flags.
  --personality-remove {persona}    Remove these personality flags.

  --drop-sugid {method}             Drop the setuid/setgid bits when re-executing.
                                     • methods: {styled('prctl').bright_magenta()}, {styled('chmod').bright_magenta()}
  --is-setuid                       Instruct evilcc to re-set the setuid bit of
                                    the executable when re-executing.
                                    (only applies if: {styled('--drop-sugid chmod').dim()})
  --is-setgid                       Instruct evilcc to re-set the setgid bit of
                                    the executable when re-executing.
                                    (only applies if: {styled('--drop-sugid chmod').dim()})

  --debug                           Compile evilcc in debug mode.
  --wait-for-debugger               Fire {styled('SIGSTOP').underline()} on startup to allow attaching
                                    with a debugger.

  --entry-symbol {symbol}           Change the name of the evillcc entrypoint.
  --real-entry-symbol {symbol}      Instruct evilcc to jump to this symbol after
                                    it finishes.

  --sysroot {path}                  Specify the path to the evilcc repo root.

  -<option>                         Any other options will be passed to the
                                    underlying compiler.
  +<arg>                            Arguments prefixed with '+' will be passed
                                    to the underlying compiler. This takes
                                    priority over all options above.
""")

def build_evilcc(config: Config) -> str:

    build_cmd = [
        config.cc,
        "-Wall", "-Wextra",
        "-fPIC", "-fPIE",
        "-ffreestanding", "-nostartfiles", "-nostdlib", "-nodefaultlibs",
    ] + config.flags

    if config.setuid is not None:
        build_cmd.append(f"-D__EVILCC_SETUID={config.setuid}")

    if config.setgid is not None:
        build_cmd.append(f"-D__EVILCC_SETGID={config.setgid}")

    if len(config.personality_add) > 0:
        build_cmd.append(f"-D__EVILCC_PERSONALITY={'|'.join(config.personality_add)}")

    if len(config.personality_remove) > 0:
        build_cmd.append(f"-D__EVILCC_PERSONALITY_MASK={'|'.join(config.personality_remove)}")

    if config.drop_sugid is not None:
        build_cmd.append(f"-D__EVILCC_DROP_SUGID=__EVILCC_DROP_SUGID_{config.drop_sugid.upper()}")

    if config.is_setuid:
        build_cmd.append("-D__EVILCC_IS_SETUID")

    if config.is_setgid:
        build_cmd.append("-D__EVILCC_IS_SETGID")

    if config.debug:
        build_cmd.append("-D__EVILCC_DEBUG")

    if config.wait_for_debugger:
        build_cmd.append("-D__EVILCC_WAIT_FOR_DEBUGGER")

    if config.entry_symbol is not None:
        build_cmd.append(f"-D__EVILCC_ENTRY_SYMBOL={config.entry_symbol}")

    if config.real_entry_symbol is not None:
        build_cmd.append(f"-D__EVILCC_REAL_ENTRY_SYMBOL={config.real_entry_symbol}")

    out = tempfile.mktemp(suffix=".o", prefix="evilcc.")

    build_cmd.extend([
        f"-I{config.sysroot}/src",
        "-c", f"{config.sysroot}/src/init.c",
        "-o", out
    ])

    run(build_cmd)

    if not config.debug:
        symbols = map(lambda line: line.split()[-1], run([config.nm, out], stdout=subprocess.PIPE).stdout.decode("ascii").splitlines())

        strip_cmd = [config.strip] + list(map(lambda sym: f"--strip-symbol={sym}", filter(lambda sym: "evilcc" in sym and sym != config.entry_symbol, symbols))) + [out]
        run(strip_cmd)

    info(f"built evilcc at: {styled(out).bold().bright_magenta()}")
    return out

###############################################################################

def main():
    config = Config()
    info(f"sysroot: {config.sysroot}")

    if config.will_link and config.is_exe:
        out = build_evilcc(config)
        config.flags.append(f"-Wl,-e{config.entry_symbol}")
        config.args.append(out)

    cmd = [config.cc] + config.flags + config.args

    if config.out is not None:
        cmd.extend(["-o", config.out])

    run(cmd)

if __name__ == "__main__":
    main()
